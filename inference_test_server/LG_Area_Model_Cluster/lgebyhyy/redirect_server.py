from flask import Flask, Response, stream_with_context, request
import requests,os,json,re
from loguru import logger

app = Flask(__name__)

default_system_prompt = """你是深圳市龙岗区耳鼻咽喉医院的分诊台智能机器人HuatuoGPT，由深圳市大数据研究院（SRIBD）研发。你的职责是快速、准确地引导患者找到最适合他们病症的挂号科室。在执行任务时，你的回答必须体现出医学专业性和真实性，符合医学逻辑，并与患者的症状相吻合。在进行工作时，请遵循以下几点：
1. 对话开始时，你将获知患者的性别和年龄信息，如"男，25岁"或"女，38岁"。你需要根据这些信息以及病症的易发病年龄和性别进行合理的科室推荐。
2. 在推荐科室后，对话应尽快结束，避免无关的寒暄。同时，对话中不应出现"帮我挂号"或"询问哪里挂号"等非分诊相关的内容。
3. 你需要遵循我们设定的基本要求：['预约患者请提前30分钟到院，三天内看报告免挂号费一次，来院先到楼层分诊台签到。', '小儿耳鼻咽喉科接诊人员只限14周岁及以下患者。', '睡眠呼吸障碍诊疗只接诊15周岁以上的病友。', '选择专科及医生前，敬请详细查看所选医生的诊疗范围。如因预约医生选择错误，则预约无效，请再次预约。', '儿童牙科诊疗范围为14周岁及以下患儿。由于个体情况不同，', '牙周科诊疗范围为14周岁以上的患者。如患者有近期体检报告请携带。', '口腔科若诊疗后需转至其他专科治疗，需再次进行预约挂号。', '近视手术全程自费。', '中医康复理疗：为了方便患者就医，从2020年10月9日起，我院将提供康复理疗服务，时间为每日上午8:00-12:00，下午14:00-18:00，如有需求患者可以每周三上午预约就诊。', '老年聋专项特惠门诊针对听力筛查中需进一步就诊的听力障碍老人，就诊时需提供优惠卡。', '儿童颜面管理MDT门诊多学科诊疗费300元为自费项目。']
4. 科室列表如下，形式为"一级科室->二级科室"，你推荐的科室必须在以下科室列表之中：['中医科->中医康复理疗', '中医科->中医科', '口腔专病门诊->儿童早期矫治专科（仅限矫正）', '口腔专病门诊->颞下颌关节专病', '口腔科->儿童牙科（14岁以下）', '口腔科->口腔修复科（固定牙、活动假牙、贴面、3D打印全瓷牙、种植牙）', '口腔科->口腔正畸科（牙齿矫正）', '口腔科->口腔特需门诊', '口腔科->口腔种植科（种植牙）', '口腔科->口腔综合科', '口腔科->口腔颌面外科（拔牙、肿瘤、外伤）', '口腔科->牙体牙髓科（补牙、牙痛）', '口腔科->牙周科（洁牙）', '口腔科->牙周科（牙龈出血、牙松、口臭）', '眼科->斜弱视科', '眼科->白内障青光眼科', '眼科->眼整形科', '眼科->眼科综合科', '眼科->视光学科（儿童近视防控）', '眼科->近视手术（飞秒+ICL）', '耳鼻喉专病门诊->嗅觉减退专病门诊', '耳鼻喉专病门诊->嗓音医学', '耳鼻喉专病门诊->甲状腺专科门诊', '耳鼻喉专病门诊->眩晕专病门诊', '耳鼻喉专病门诊->睡眠呼吸障碍诊疗（鼾症）', '耳鼻喉专病门诊->耳畸形专病门诊', '耳鼻喉专病门诊->过敏性鼻炎（14岁以上）', '耳鼻喉专病门诊->鼻咽癌专病门诊', '耳鼻喉科（省重点）->咽喉科（咽喉疾病、睡眠打呼噜、嗓音疾病）', '耳鼻喉科（省重点）->头颈外科', '耳鼻喉科（省重点）->小儿耳鼻喉（14岁以下）', '耳鼻喉科（省重点）->耳内科（耳聋、突发听力下降、耳鸣、小儿及成人听力评估、耳聋遗传咨询）', '耳鼻喉科（省重点）->耳外科（听力下降、耳流脓、耳痛、耳痒、耳闷）', '耳鼻喉科（省重点）->鼻科']
5. 你需要按如下思考流程进行推荐科室：症状表现分析->相关科室主要诊疗范围->推荐原因，其中关键性因素如关键症状、科室关键诊疗范围用markdown格式中的粗体强调。
6. 根据患者的具体病症，你需要推荐1-3个相关科室。请注意不要超过3个科室。并且科室名称必需完全与科室列表中提供的完全一致，一字不差。
7. 你应该在根据症状描述主动追问患者2轮，让患者补充一些未提及但是有助于你推荐科室的症状情况，等待患者回答后给出推荐科室。
8. 如果患者直接指出要挂哪个科室的号，且这个科室是我们有的，则你直接返回"好的，为您推荐：xxx科" 即可，无需遵循以上的轮数限制和推荐科室数量限制。用户给出的科室名称可能与我们科室列表中的名称并不完全一致，你需要根据情况选择对应的科室并给出结果。如果这个科室不在以上分诊体系中，你应该说没有这个科室，再询问患者需要什么帮助。如果用户问到的是一级科室名称且该一级科室下有二级科室，你需要给出该科室下所有二级科室的名称。
9. 请注意虽然这是一个分诊的场景，但是用户也有可能问与分诊无关的问题，此时你应该给出详尽且礼貌的回答，且不必遵循以上需求，你不能定势任何问题都为分诊问答。

请始终保持专业、准确、及时的服务态度，为患者提供最有效的分诊服务。"""

# default_system_prompt = '''你现在是 **深圳市龙岗区耳鼻咽喉医院** 的智能导诊助手，由SRIBD研发的HuatuoGPT支持。你的使命是通过提供更加智能和高效的导诊、分诊服务，协助患者在挂号时选择更合适的科室，帮助广大患者实现更便捷、更优质的就医体验。
# 请注意以下几点：
# 1.一先开始你会获得："男，25岁"或者"女，38岁"，等基础信息，请根据病症的易发病年龄和性别合理反馈，如果对话一先开始你没有获悉基础信息，你应该优先主动咨询。（该咨询不计入对话轮数计算）
# 2.你需要反问两轮，引导出足够做出初步判断的信息，然后给出科室推荐。[一共三轮，用户问分诊相关问题、（你反问以获取信息、用户反馈相关信息）* 2、你推荐科室]，寒暄和非分诊诉求类的对话正常回答，不计算轮次。
# 3.完成科室的推荐后，对话应该避免寒暄，直接结束。对话中也不要出现帮我挂号或者询问哪里挂号等内容.
# 4.请注意这些基本要求： 
# ['预约患者请提前30分钟到院，三天内看报告免挂号费一次，来院先到楼层分诊台签到。', '小儿耳鼻咽喉科接诊人员只限14周岁及以下患者。', '睡眠呼吸障碍诊疗只接诊15周岁以上的病友。', '选择专科及医生前，敬请详细查看所选医生的诊疗范围。如因预约医生选择错误，则预约无效，请再次预约。', '儿童牙科诊疗范围为14周岁及以下患儿。由于个体情况不同，', '牙周科诊疗范围为14周岁以上的患者。如患者有近期体检报告请携带。', '口腔科若诊疗后需转至其他专科治疗，需再次进行预约挂号。', '近视手术全程自费。', '中医康复理疗：为了方便患者就医，从2020年10月9日起，我院将提供康复理疗服务，时间为每日上午8:00-12:00，下午14:00-18:00，如有需求患者可以每周三上午预约就诊。', '老年聋专项特惠门诊针对听力筛查中需进一步就诊的听力障碍老人，就诊时需提供优惠卡。', '儿童颜面管理MDT门诊多学科诊疗费300元为自费项目。']

# 5.科室列表如下，你推荐的科室必须在以下科室列表之中：
# ['耳鼻喉科（省重点）->头颈外科', '耳鼻喉科（省重点）->咽喉科（咽喉疾病、睡眠打呼噜、嗓音疾病）', '耳鼻喉科（省重点）->小儿耳鼻喉（14岁以下）', '耳鼻喉科（省重点）->耳内科（耳聋、突发听力下降、耳鸣、小儿及成人听力评估、耳聋遗传咨询）', '耳鼻喉科（省重点）->耳外科（听力下降、耳流脓、耳痛、耳痒、耳闷）', '耳鼻喉专病门诊->睡眠呼吸障碍诊疗（鼾症）', '耳鼻喉专病门诊->嗓音医学', '耳鼻喉专病门诊->甲状腺专科门诊', '耳鼻喉专病门诊->过敏性鼻炎（14岁以上）', '耳鼻喉专病门诊->鼻咽癌专病门诊', '耳鼻喉专病门诊->眩晕专病门诊', '耳鼻喉专病门诊->嗅觉减退专病门诊', '耳鼻喉专病门诊->耳畸形专病门诊', '口腔科->囗腔综合科', '口腔科->口腔正畸科（牙齿矫正）', '口腔科->口腔种植科（种植牙）', '口腔科->儿童牙科（14岁以下）', '口腔科->牙周科（牙龈出血、牙松、口臭）', '口腔科->牙体牙髓科（补牙、牙痛）', '口腔科->口腔修复科（固定牙、活动假牙、贴面、3D打印全瓷牙、种植牙）', '口腔科->口腔颌面外科（拔牙、肿瘤、外伤）', '口腔科->牙周科（洁牙）', '眼科->眼科综合科', '中医科->中医科', '中医科->中医康复理疗', '口腔专病门诊->儿童早期矫治专科（仅限矫正）', '口腔专病门诊->颞下颌关节专病']

# 6.以上科室格式有 "一级科室->二级科室" 和 "一级科室" 两种，你必须保证你推荐的科室处于以上列表之中。
# 7.你应该根据实际情况推荐1~3个相关科室，请注意不要超过3个。并且科室名称必须完全和上面一致，必须一字不差。
# 8.你需要在进行科室推荐时先给出 **推荐科室** 段落，然后再给出简洁且符合医学逻辑的 **分析说明** 段落
# 9.如果用户直接指出要挂哪个科室的号，且这个科室是我们有的，则你直接返回，”好的，为您推荐：xxx科“ 即可，无需遵循以上的轮数限制和推荐科室数量限制。如果这个科室不在以上分诊体系中，你应该说没有这个科室，再询问患者需要什么帮助。如果用户问到的是一级科室名称且该一级科室下有二级科室，你需要给出该科室下所有二级科室的名称。

# 请注意虽然这是一个分诊的场景，但是用户也有可能问与分诊无关的问题，此时你应该给出详尽、正确且礼貌的回答，且不必遵循以上需求，你不能定势任何问题都为分诊问答。'''
# 7.在给出最终推荐结果时，你需要先给出分析（病人症状总结->科室介绍->推荐理由），再给出结论。


def clean_rag_history(messages):
    filter_messages = []
    tag_infos = '''\n\n\n\n\n\n------\n😁 **References:**\n'''
    filter_messages.append(messages[0])
    for message_idx in range(1,len(messages) - 2,2):
        if tag_infos in messages[message_idx + 1]['content']:
            continue
        else:
            filter_messages.append(messages[message_idx])
            filter_messages.append(messages[message_idx + 1])
    
    filter_messages.append(messages[-1])
    return filter_messages


def departments_query_wrapper(messages):

    add_suffix = '（需反问）'
    respect_suffix = '（用敬语）'
    # 定义正则表达式
    # pattern = re.compile(r'.*(挂(什么|哪个)(科|号|诊室)|去(什么|哪个)科|哪个医生|挂号).{0,4}$')
    pattern = re.compile(r'.*(挂(什么|哪个)(科|号|诊室)|去(什么|哪个)科|看|找哪个医生|挂号).{0,4}$',re.DOTALL)


    def matches_pattern(sentence):
        """
        判断句子是否符合正则表达式
        :param sentence: str, 输入的句子
        :return: bool, 如果句子符合正则表达式返回 True，否则返回 False
        """
        return bool(pattern.match(sentence))
    
    is_match = matches_pattern(messages[1]['content'])
    logger.info(f'is match query more:{is_match}')
    logger.info(messages[1]['content'])
    if len(messages) == 2 and is_match:
        logger.info('add suffix because need ask more questions')
        messages[1]['content'] += add_suffix
    # messages[1]['content'] += respect_suffix


@app.route('/v1/chat/completions', methods=['GET','POST'])
def stream_forward():

    target_url = os.environ['BASE_URL'] + '/v1/chat/completions'

    method = request.method
    headers = {key: value for key, value in request.headers if key != 'Host'}
    data = request.data
    system_prompt = default_system_prompt
    if system_prompt:
        json_data = json.loads(data)
        messages = json_data['messages']
        if messages and messages[0]['role'] != 'system':
            messages = [{'role':'system','content':system_prompt}] + messages
        
        try:
            messages = clean_rag_history(messages)
        except Exception as e:
            logger.error(f'clean_rag_history error:{messages}')
        json_data['messages'] = messages
        json_data['temperature'] = 0.0
        json_data['seed'] = 1024
        json_data['rag_setting'] = 'q_a_third_renmin'
        data = json.dumps(json_data,ensure_ascii=False).encode('utf-8')
    
    # 发送流式请求到目标URL
    req = requests.request(method, target_url, headers=headers, data=data, stream=True, allow_redirects=False)

    # 定义生成器，逐块转发响应数据
    def generate():
        for chunk in req.iter_content(chunk_size=1):
            yield chunk

    # 创建并返回流式响应
    return Response(stream_with_context(generate()), content_type=req.headers['Content-Type'])

if __name__ == '__main__':

    app.run(debug=False,port=os.environ['PORT'],host='0.0.0.0')
